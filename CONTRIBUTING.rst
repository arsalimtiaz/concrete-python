How to contribute code
======================

1. Create an issue on GitLab (internal) or GitHub_ (public).
2. If you are adding new functionality, create a stub implementation
   of the desired argument/function/class/etc.
3. Write a test for your new functionality/bugfix and run it, ensuring
   that it fails on the current implementation::

      py.test tests/test_my_code.py

   NameErrors, ImportErrors, SyntaxErrors, etc. do *not* count.
4. Implement your new functionality/bugfix.
5. Run the test again, ensuring that it now passes.
6. Run all tests and style checks, ensuring that they pass::

       tox

   Optionally, run integration tests (you must have Redis_ server
   version 2.8 or later in your path; do ``redis-server --version``
   to check)::

       tox integration-tests

7. If you created a new module (file) under ``concrete/util``, please
   add it to the imports in ``concrete/util/__init__.py``.
8. Push your changes to a feature branch on GitLab/GitHub (e.g., called
   ``n-issue-abbrev`` where ``n`` is the issue number and
   ``issue-abbrev`` is a very short abbreviation of the issue title)
   and ensure that the build passes.  The build is defined in
   ``.gitlab-ci.yml`` (``.travis.yml`` and ``appveyor.yml`` for public
   builds); tox is configured in ``tox.ini``.  The build
   includes unit tests, integration tests, and style checks and runs on
   Python 2.7 and 3.5 across multiple platforms; if it fails, please
   find the error in the build log, fix it, and try again.
9. Add a line to ``CHANGELOG`` under the current version-in-progress
   describing your changes simply and concisely.
10. If you've made multiple commits, please squash them and
    ``git push -f`` to the feature branch.
11. Create a merge/pull request for your feature branch into
    ``master``, referencing the GitLab/GitHub issue.


For maintainers
===============

Branches, versions, and releases
--------------------------------

The master branch is kept stable at all times.  Before a commit is
pushed to master, it should be checked by CI on another branch.  The
recommended way of maintaining this is to do all work in feature
branches that are kept up-to-date with master and pushed to GitLab,
waiting for CI to finish before merging.

We use zest.releaser_ to manage versions, the ``CHANGELOG``, and
releases.  (Making a new release is a many-step process that requires
great care; doing so by hand is strongly discouraged.)
Using zest.releaser, stable versions are released to PyPI
and master is kept on a development version number (so that a stable
version number never represents more than one snapshot of the code).
To make a new release install zest.releaser
(``pip install zest.releaser``) and run ``fullrelease``.

Testing PyPI releases
---------------------

To test how changes to concrete-python will show up on PyPI (for
example, how the readme is rendered) you can use the PyPI testing
site.  To do so, set the following in ``~/.pypirc``::

    repository = https://testpypi.python.org/pypi

You will also need to create a testpypi user account and you may need
to request access to the ``concrete`` package on testpypi.

(Re)generating code from concrete
---------------------------------

The Python code generated by the thrift compiler on the schema defined
in the concrete project is checked in to concrete-python manually after
applying necessary patches.  For *trivial* modifications to the schema
this process is automated by ``generate.bash``, which assumes concrete
has been cloned alongside concrete-python (in the same parent
directory)::

    bash generate.bash

After this succeeds, tests should be run and the changes should be
manually inspected (``git diff``) for sanity.  Note that this will not
delete previously-generated files that are no longer produced by
thrift (whose entries were removed from the schema).

**Note**: Often ``generate.bash`` is not sufficient: the patches (in
``patches/``) document where it (thrift) falls short on the
previously-compiled schema.  Additionally, if new packages
(namespaces) are added to the schema, they must be added to
``setup.py``, ``setup.cfg``, and ``concrete/__init__.py``.

If ``generate.bash`` throws an error, the
necessary changes should be performed manually and checked in to the
index, at which point the generated code should be removed from the
working tree, raw (unpatched) generated code should be generated, and
new patches should be produced and stored in ``patches/`` using
``git diff``.  See the arguments to ``generate.bash`` for generating
the unpatched code.



.. _GitHub: https://github.com/hltcoe/concrete-python
.. _Redis: http://redis.io
.. _zest.releaser: http://zestreleaser.readthedocs.io/en/latest/overview.html
